1. View two tables at once (two different views, both didn't come out easy too read. Plan name wrapped to the beginning in the second table.

sqlite> SELECT * FROM allotments, plan_name WHERE allotments.plan_name_id = plan
_name.id;
1|20.0|100|100|1.0|1|1|More Everything Plan
2|40.0|200|200|2.0|1|1|More Everything Plan
3|50.0|500|500|5.0|1|1|More Everything Plan
4|90.0|2000|2000|10.0|1|1|More Everything Plan
5|25.99|150|100|0.495|2|2|Mobile Share Value Plan
6|45.99|400|400|1.0|2|2|Mobile Share Value Plan
7|100000000.0|5000|5000|100.0|3|3|Simple Choice
8|80.95|2000|2000|6.0|4|4|Talk Text & Data
9|10.0|50|50|0.0|4|4|Talk Text & Data
sqlite>


sqlite> SELECT * FROM allotments, plan_name WHERE allotments.plan_name_id = plan
_name.id;
id          price       minutes     SMS         data_GB     plan_name_id  id
      plan_name
----------  ----------  ----------  ----------  ----------  ------------  ------
----  --------------------
1           20.0        100         100         1.0         1             1
      More Everything Plan
2           40.0        200         200         2.0         1             1
      More Everything Plan
3           50.0        500         500         5.0         1             1
      More Everything Plan
4           90.0        2000        2000        10.0        1             1
      More Everything Plan
5           25.99       150         100         0.495       2             2
      Mobile Share Value P
6           45.99       400         400         1.0         2             2
      Mobile Share Value P
7           100000000.  5000        5000        100.0       3             3
      Simple Choice
8           80.95       2000        2000        6.0         4             4
      Talk Text & Data
9           10.0        50          50          0.0         4             4
sqlite>


2. update an item that meets some condition

sqlite> UPDATE allotments SET SMS=2500 WHERE SMS=2000;
sqlite> SELECT * FROM allotments;
id          price       minutes     SMS         data_GB     plan_name_id
----------  ----------  ----------  ----------  ----------  ------------
1           20.0        100         100         1.0         1
2           40.0        200         200         2.0         1
3           50.0        500         500         5.0         1
4           90.0        2000        2500        10.0        1
5           25.99       150         100         0.495       2
6           45.99       400         400         1.0         2
7           100000000.  5000        5000        100.0       3
8           80.95       2000        2500        6.0         4
9           10.0        50          50          0.0         4
sqlite>

3. Display the information in both tbles using one query (I don't know how this is different from #1)

sqlite> SELECT * FROM allotments JOIN plan_name ON allotments.plan_name_id = pla
n_name.id;
id          price       minutes     SMS         data_GB     plan_name_id  id
      plan_name
----------  ----------  ----------  ----------  ----------  ------------  ------
----  --------------------
1           20.0        100         100         1.0         1             1
      More Everything Plan
2           40.0        200         200         2.0         1             1
      More Everything Plan
3           50.0        500         500         5.0         1             1
      More Everything Plan
4           90.0        2000        2500        10.0        1             1
      More Everything Plan
5           25.99       150         100         0.495       2             2
      Mobile Share Value P
6           45.99       400         400         1.0         2             2
      Mobile Share Value P
7           100000000.  5000        5000        100.0       3             3
      Simple Choice
8           80.95       2000        2500        6.0         4             4
      Talk Text & Data
9           10.0        50          50          0.0         4             4
      Talk Text & Data
sqlite>

4. Narrow the selection of two table columns to not show all columns in one query.

sqlite> SELECT plan_name.plan_name, allotments.price, allotments.minutes, allotm
ents.SMS, allotments.data_GB FROM allotments JOIN plan_name ON allotments.plan_n
ame_id = plan_name.id;
plan_name             price       minutes     SMS         data_GB
--------------------  ----------  ----------  ----------  ----------
More Everything Plan  20.0        100         100         1.0
More Everything Plan  40.0        200         200         2.0
More Everything Plan  50.0        500         500         5.0
More Everything Plan  90.0        2000        2500        10.0
Mobile Share Value P  25.99       150         100         0.495
Mobile Share Value P  45.99       400         400         1.0
Simple Choice         100000000.  5000        5000        100.0
Talk Text & Data      80.95       2000        2500        6.0
Talk Text & Data      10.0        50          50          0.0
sqlite>

5. Delete an item that meets some condition (I deleted all "mobile share value plans" which has a plan_name_id = 2 from allotments because those plans no longer exist)

sqlite> DELETE FROM allotments WHERE plan_name_id = 2;

sqlite> SELECT * FROM allotments;

id          price       minutes     SMS         data_GB     plan_name_id
----------  ----------  ----------  ----------  ----------  ------------
1           20.0        100         100         1.0         1
2           40.0        200         200         2.0         1
3           50.0        500         500         5.0         1
4           90.0        2000        2500        10.0        1
7           100000000.  5000        5000        100.0       3
8           80.95       2000        2500        6.0         4
9           10.0        50          50          0.0         4
sqlite>


Release 3 - Research on your own:

JOIN clause is used to combine rows from two or more tables besed on a common field between them. 

Different kinds of JOINS:

INNER JOIN: Returns all rows when there is at least one match in BOTH tables.
 Results below: INNER JOIN is the same as join. It matches what both table have in common. 

sqlite> SELECT allotments.price, allotments.minutes, allotments.SMS, allotments.
data_GB, plan_name.plan_name FROM allotments INNER JOIN plan_name ON plan_name.i
d = allotments.plan_name_id;
price       minutes     SMS         data_GB     plan_name
----------  ----------  ----------  ----------  --------------------
20.0        100         100         1.0         More Everything Plan
40.0        200         200         2.0         More Everything Plan
50.0        500         500         5.0         More Everything Plan
90.0        2000        2500        10.0        More Everything Plan
100000000.  5000        5000        100.0       Simple Choice
80.95       2000        2500        6.0         Talk Text & Data
10.0        50          50          0.0         Talk Text & Data
sqlite>

LEFT JOIN: Return all rows from the left table, and the matched rows from the right table
	Results below: I ran this LEFT JOIN twice switching which table was on the left. The first table that has the allotment table on the left has a match with every column because this table has a foreign id for plan_name id. The second examle where the plan_name table is on the left hs a number of missing values in the mobile share value plan. These plans were deleted from the allotments table. 
	left join shows all entries from the left table and all rows in common with the second table.

sqlite> SELECT * FROM allotments LEFT JOIN plan_name ON plan_name.id = allotment
s.plan_name_id;
1|20.0|100|100|1.0|1|1|More Everything Plan
2|40.0|200|200|2.0|1|1|More Everything Plan
3|50.0|500|500|5.0|1|1|More Everything Plan
4|90.0|2000|2500|10.0|1|1|More Everything Plan
7|100000000.0|5000|5000|100.0|3|3|Simple Choice
8|80.95|2000|2500|6.0|4|4|Talk Text & Data
9|10.0|50|50|0.0|4|4|Talk Text & Data
sqlite>

sqlite> SELECT * FROM plan_name LEFT JOIN allotments ON plan_name.id = allotment
s.plan_name_id;
1|More Everything Plan|1|20.0|100|100|1.0|1
1|More Everything Plan|2|40.0|200|200|2.0|1
1|More Everything Plan|3|50.0|500|500|5.0|1
1|More Everything Plan|4|90.0|2000|2500|10.0|1
2|Mobile Share Value Plan||||||
3|Simple Choice|7|100000000.0|5000|5000|100.0|3
4|Talk Text & Data|9|10.0|50|50|0.0|4
4|Talk Text & Data|8|80.95|2000|2500|6.0|4
sqlite>

RIGHT JOIN - return all rows from the right tables, and the matched rows from the left table
	Results: this would have given me the same resutls as the LEFT JOIN when I changed the position of my two tables. I could have just used RIGHT join instead of switching the position of the table names to receive the same results in the second table in the LEFT JOIN example. This JOIN shows all entries from the right table and all rows in common with the second table. 

sqlite> SELECT * FROM allotments RIGHT JOIN plan_name ON plan_name.id = allotmen
ts.plan_name_id;
Error: RIGHT and FULL OUTER JOINs are not currently supported

FULL JOIN - Returns all rows when there is a match in ONE of the tables
	Returns all the rows from the right table and all the rows from the left table. If there are rows in one table that do not have matches, those rows are listed as well. It seems to be a combination of LEFT JOIN and RIGHT JOIN. 

sqlite> SELECT * FROM allotments FULL JOIN plan_name ON plan_name.id = allotment
s.plan_name_id;
Error: RIGHT and FULL OUTER JOINs are not currently supported
sqlite>